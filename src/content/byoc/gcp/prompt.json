Build a self service system for our customer success team where we can see how our customers are using their Okteto instances

Each active Okteto cluster sends telemetry to an okteto endpoint. the telemetry is stored in a BigQuery instance in our GCP account. The instance has the following schema:
[{
  "column_name": "license",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the license key on the cluster"
}, {
  "column_name": "kversion",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the kubernetes version of the cluster"
  
}, {
  "column_name": "namespaces",
  "data_type": "INT64",
  "is_nullable": "YES",
  "description": "the total number of namespaces managed by okteto on the cluster"
}, {
  "column_name": "users",
  "data_type": "INT64",
  "is_nullable": "YES",
  "description": "the total number of user accounts  managed by okteto on the cluster"
}, {
  "column_name": "version",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the version of the Okteto platform installed in the cluster"
}, {
  "column_name": "platform",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the name of the platform where the cluster is running: aks, gke, eks, civo, ephemeral, etc"
}, {
  "column_name": "timestamp",
  "data_type": "TIMESTAMP",
  "is_nullable": "YES",
  "description": "the timestamp of the row"
}, {
  "column_name": "cluster",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the unique ID of the cluster"
  
}, {
  "column_name": "auth",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the name of the authentication provider"
}, {
  "column_name": "cloud",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the name of the cloud where the cluster is running: aks, gke, eks, civo, ephemeral, etc. no longer in use"
}, {
  "column_name": "dailyActiveNamespaces",
  "data_type": "INT64",
  "is_nullable": "YES"
}, {
  "column_name": "weeklyActiveNamespaces",
  "data_type": "INT64",
  "is_nullable": "YES"
}, {
  "column_name": "monthlyActiveNamespaces",
  "data_type": "INT64",
  "is_nullable": "YES"
}, {
  "column_name": "company",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the company name"
}, {
  "column_name": "nodes",
  "data_type": "INT64",
  "is_nullable": "YES",
  "description": "the total number of nodes managed by okteto on the cluster"
}, {
  "column_name": "previews",
  "data_type": "INT64",
  "is_nullable": "YES",
  "description": "the total number of preview environments managed by okteto on the cluster"
}, {
  "column_name": "tier",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the tier of the subscrption"
}, {
  "column_name": "trial",
  "data_type": "BOOL",
  "is_nullable": "YES",
  "description": "trial or production instance"
}, {
  "column_name": "deploymentType",
  "data_type": "STRING",
  "is_nullable": "YES",
  "description": "the type of deployment: self-hosted, saas, byoc, empty"
}, {
  "column_name": "dailyActiveUsers",
  "data_type": "INT64",
  "is_nullable": "YES"
}, {
  "column_name": "weeklyActiveUsers",
  "data_type": "INT64",
  "is_nullable": "YES"
}, {
  "column_name": "monthlyActiveUsers",
  "data_type": "INT64",
  "is_nullable": "YES"
}]

- Create a dashboard that shows the last available entry for each cluster. I want to be able to filter and sort it by each field
- When I click on a cluster, I want to see the following information: 
-- the average node , daily active users, and monthly active users for the last 45 days 
-- the max users on the past 45 days
-- the last available value of the license, cluster,  okteto version, the kubernetes version, the cloud, deployment, and trial
-- a chart that shows the daily value of  monthly active users over the past 90 days
-- a chart that shows the daily value of active users over the past 90 days
-- a chart that shows the daily value of previews over the past 90 days
-- a chart that shows the daily value of nodes  over the past 90 days
-- a table with the last 90 available rows of telemetry


> "Transform the Oktaco Shop order checking service to include a real-time dashboard for order analytics. The system should:
> 
> - Migrate from AWS RDS to a containerized PostgreSQL deployed via Helm chart for better local development
> - Create a web dashboard that visualizes order data with charts showing item popularity and order trends
> - Implement intelligent data normalization that handles:
>     - Quantity extraction from item names (e.g., '2 tacos' â†’ quantity: 2, item: 'taco')
>     - Pluralization normalization (e.g., 'burrito' and 'burritos' are the same)
>     - Case-insensitive matching
>     - Common variations and Spanish translations
> - Ensure zero downtime migration with proper database schema versioning
> - Update the Okteto configuration to support the new architecture
> - Maintain the existing SQS integration while adding the visualization layer"